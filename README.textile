__*Important note if your project doesn't use ARC*: you must add the @-fobjc-arc@ compiler flag to @SVPullToRefresh.m@ in Target Settings > Build Phases > Compile Sources.__

h1. SVPullToRefresh

SVPullToRefresh allows you to easily add pull-to-refresh and/or infinite scrolling functionalities to any @UITableView@ subclass with only 1 line of code. Instead of depending on delegates and/or subclassing @UIViewController@, SVPullToRefresh extends @UIScrollView@ with the following 2 methods:

<pre>
- (void)addPullToRefreshWithActionHandler:(void (^)(void))actionHandler;
- (void)addInfiniteScrollingWithActionHandler:(void (^)(void))actionHandler;
</pre>

h2. Installation

* Drag the @SVPullToRefresh/SVPullToRefresh@ folder into your project. 
* Add the *QuartzCore* framework to your project.
* @#import "SVPullToRefresh.h"@

h2. Usage

(see sample Xcode project in @/Demo@)

h3. Adding pull to refresh to your table view

<pre>
[tableView addPullToRefreshWithActionHandler:^{
    // refresh data
    // call [tableView.pullToRefreshView stopAnimating] when done
}];
</pre>

If youâ€™d like to programmatically trigger the refresh (for instance in viewDidLoad), you can do so with:

<pre>
[tableView.pullToRefreshView triggerRefresh];
</pre>

You can temporarily hide/disable pull to refresh by setting the @showsPullToRefresh@ property:

<pre>
tableView.showsPullToRefresh = NO;
</pre>

h4. Customization

The @pullToRefreshView@ view can be customized using the following properties:

<pre>
@property (nonatomic, strong) UIColor *arrowColor;
@property (nonatomic, strong) UIColor *textColor;
@property (nonatomic, readwrite) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
@property (nonatomic, assign) BOOL showsText;
</pre>

You can access these properties through your scroll view's @pullToRefreshView@ property. 

For instance, you would set the @arrowColor@ property using:

<pre>
tableView.pullToRefreshView.arrowColor = [UIColor whiteColor];
</pre>

You can also hide the text (pull to refresh, release to refresh, ...) by setting the @showsText@ property to @NO@

<pre>
tableView.pullToRefreshView.showsText = NO;
</pre>

h4. Showing a "Last Updated" label

If you think it's in the user's interest to display the date of the last refresh, you can set the @lastUpdatedDate@ property of @pullToRefreshView@:

<pre>
tableView.pullToRefreshView.lastUpdatedDate = nil; // will display "Last Updated: Never"
tableView.pullToRefreshView.lastUpdatedDate = [NSDate date]; // will display "Last Updated: 4/30/12 11:53 AM"
</pre>

You can also configure how the date is displayed by setting the @dateFormatter@ property:

<pre>
NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
dateFormatter.dateStyle = NSDateFormatterLongStyle;
dateFormatter.timeStyle = NSDateFormatterNoStyle;
tableView.pullToRefreshView.dateFormatter = dateFormatter;
</pre>

h3. Adding infinite scrolling to your table view

<pre>
[tableView addInfiniteScrollingWithActionHandler:^{
    // add data to data source, insert new cells into table view
}];
</pre>

You can temporarily hide/disable infinite scrolling by setting the @showsInfiniteScrolling@ property:

<pre>
tableView.showsInfiniteScrolling = NO;
</pre>

h4. Customization

The @infiniteScrollingView@ (a @UIView@ subclass) can be customized using the following properties:

<pre>
@property (nonatomic, readwrite) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
</pre>

You can access these properties through your scroll view's @infiniteScrollingView@ property. 

h2. Under the hood

SVPullToRefresh extends @UIScrollView@ by adding new public methods as well as a dynamic properties (thanks "@seb_morel":http://twitter.com/seb_morel!). It uses key-value observing to track the scrollView's @contentOffset@, which removes the need for the view to be linked to the @UIScrollViewDelegate@ protocol.

h2. Credits

SVPullToRefresh is brought to you by "Sam Vermette":http://samvermette.com and "contributors to the project":https://github.com/samvermette/SVPullToRefresh/contributors. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by "creating new issues":https://github.com/samvermette/SVPullToRefresh/issues/new. If you're using SVPullToRefresh in your project, attribution would be nice. 

Big thanks to "@seb_morel":http://twitter.com/seb_morel for his "Demistifying the Objective-C runtime":http://cocoaheadsmtl.s3.amazonaws.com/demistifying-runtime.pdf talk, which permitted the level of abstraction found in SVPullToRefresh.

Hat tip to "Loren Brichter":http://twitter.com/lorenb for inventing such a great UI mechanism.